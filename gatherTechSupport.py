import panos, panos.firewall, requests
from pancore import panCore, panExcelStyles
import sys, datetime, argparse

"""
Changelog
2024-04-05  Added to GIT repo

Goals
Convert from 'Scratch file' to usable script. Current status is just something to provide code to Pycharm environment and interactively work with manually.


"""

"""
In order to have a default behavior of reports being "ENABLED" we default=True below, but then use "store_false" when 
 a flag is activated. This strange "enabling a negative" is counter-intuitive, but the reversed behavior upon 
 ENABLING the flag to DISABLE the report simplifies the user interactions and allows the default to be overruled 
 when the flag is used.
"""

parser = argparse.ArgumentParser(
    prog="ChangePanoramaScratch",
    description="Scratchfile to change Panorama IP addresses")
    #epilog="Text")
parser.add_argument('-I', '--headless', help="Disable Interactions; operate in headless mode, without user input (Will disable panCore's ability to prompt for credentials)", default=False, action='store_true')
parser.add_argument('-L', '--logfile', help="Log file to store log output to.", default='gatherTSF.log')
parser.add_argument('-c', '--conffile', help="Specify the config file to read options from. Default 'panCoreConfig.json'.", default="panCoreConfig.json")
args = parser.parse_known_args()

panCore.startLogging(args[0].logfile)

panCore.configStart(headless=args[0].headless, configStorage=args[0].conffile)
if hasattr(panCore, 'panUser'):
    pano_obj, deviceGroups, firewalls, templates, tStacks = panCore.buildPano_obj(panAddress=panCore.panAddress, panUser=panCore.panUser, panPass=panCore.panPass)
elif hasattr(panCore, 'panKey'):
    pano_obj, deviceGroups, firewalls, templates, tStacks = panCore.buildPano_obj(panAddress=panCore.panAddress, panKey=panCore.panKey)
else:
    panCore.logging.critical("Found neither username/password nor API key. Exiting.")
    sys.exit()



responses = {}
panCore.logging.info("Starting to queue tech support files..")
devicesWithTelemetryEnabled = []
fwCount = len(firewalls)
fwNum = 0
for fw_obj in firewalls[16:]:
    fwNum += 1
    try:
        if not fw_obj.state.connected:
            panCore.logging.info(f"\t> Device Offline: {fw_obj.serial} ({fwNum}/{fwCount})")
            continue
        sysInfo = fw_obj.show_system_info()
        xmlData = panCore.xmlToLXML(fw_obj.op('request tech-support dump'))
        response = ""
        for line in xmlData.findall('.//result/msg/line'):
            if len(response.splitlines()) > 0:
                response = response + "\n"
            response = response + (line.text)
        responses[fw_obj.serial] = response
    except Exception as exception_details:
        panCore.logging.exception(f"ERROR ENCOUNTERED WHILE auditing {fw_obj.serial}")
        panCore.logging.exception(exception_details)


keys = list(responses.keys())
for fwSN in keys[0:5]:
    fw_obj = pano_obj.find(fwSN)

panCore.logging.info("Starting to download tech support files..")
devicesWithTelemetryEnabled = []
fwCount = len(firewalls)
fwNum = 0
for fw_obj in firewalls:
    fwNum += 1
    try:
        if not fw_obj.state.connected:
            panCore.logging.info(f"\t> Device Offline: {fw_obj.serial} ({fwNum}/{fwCount})")
            continue
        sysInfo = fw_obj.show_system_info()
        jobList = panCore.xmlToLXML(fw_obj.op('show jobs all'))
        for job in jobList.findall('.//result/job'):
            if job.xpath('./type')[0].text == 'Exec' and job.xpath('./resultfile')[0].text == '//tmp/techsupport.tgz':
                jobID = job.xpath('./id')[0].text
                timeFin = job.xpath('./tfin')[0].text.replace('/','_').replace(' ', '_').replace(':','_')
                break
        panCore.logging.info(f"Downloading tech support file generated by {jobID} at {timeFin} from {sysInfo['system']['hostname']} ({fw_obj.serial})  ({fwNum}/{fwCount})")
        response = requests.get(f"https://{sysInfo['system']['ip-address']}/api/?key={fw_obj.xapi.api_key}&job-id={jobID}&type=export&category=tech-support&action=get", verify=False)
        with open(f"{sysInfo['system']['hostname']}_TechSupport_{timeFin}.tgz", "wb") as f:
            f.write(response.content)
    except Exception as exception_details:
        panCore.logging.exception(f"ERROR ENCOUNTERED WHILE auditing {fw_obj.serial}")
        panCore.logging.exception(exception_details)
